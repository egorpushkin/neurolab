<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
	<title>IDataFlow Interface</title>
	<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
	<link href="../style.css" rel="stylesheet" type="text/css">
	<script type="text/javascript" src="../Scripts/collapse_engine.js"></script>	
</head>

<body bgcolor="#FFFFFF" topmargin="0" leftmargin="0">
	<div class="department_title">		
		Network Importing SDK Documentation
	</div>
	<div class="page_title">		
		IDataFlow Interface
	</div>
	<div class="body_text">
		<img src="../ArchImages/IDataFlow.gif" class="figure">
	</div>
	<pre class="body_declaration">
interface IDataFlow : public IObject</pre>	
	<div class="body_subtitle">
		Remarks	
	</div>
	<div class="body_text">
		This interface used to perform data flow through network element.
	</div>
	
	<div class="body_subtitle">
		Supported Interfaces
	</div>
	<div class="body_text">
		<table class="data_table" align="center">
			<tr class="data_table_header">
				<td width="33%">Interface Name</td>
				<td width="33%">Interface Identificator</td>				
				<td width="34%">Declared In</td>				
			</tr>
			<tr class="data_table_row">
				<td><a href="IElement.htm">IElement</a></td>
				<td>IDD_IElement</td>
				<td><span class="file_name">CmnElement.h</span></td>
			</tr>
			<tr class="data_table_row">
				<td><a href="IDataConnector.htm">IDataConnector</a></td>
				<td>IDD_IDataConnector</td>
				<td><span class="file_name">CmnElement.h</span></td>
			</tr>
			<tr class="data_table_row">
				<td><a href="ILayerControl.htm">ILayerControl</a></td>
				<td>IDD_ILayerControl</td>
				<td><span class="file_name">CmnElement.h</span></td>
			</tr>								
		</table>		
	</div>
	<div class="body_note">
		<b>Note</b> The <b>ILayerControl</b> interface supported by the following elements only:
			<i>Input Factory</i>,
			<i>Output Factory</i>,			
			<i>Hopfield Layer</i>,						
			<i>Neurons Layer</i>,						
			<i>RBF Layer</i>,						
			<i>Winner Layer</i>
	</div>
	
	<div class="body_subtitle">
		IDataFlow members
	</div>
	<div class="body_text">
		<table class="data_table" align="center">
			<tr class="data_table_header">
				<td colspan="2">	
					Common operations
				</td>
			</tr>
			<tr class="data_table_row">				
				<td width="35%">
					<a name="_IDataFlow_GetElementFunction"></a>
					<b>GetElementFunction</b>
				</td>
				<td width="65%">
					Returns activation function object (<a href="sFunction.htm">sFunction</a>) associated with network element.
				</td>				
			</tr>
			<tr class="data_table_row">				
				<td>
					<a name="_IDataFlow_SetElementFunction"></a>				
					<b>SetElementFunction</b>
				</td>
				<td>
					Changes element's activation function object to the specified one.
				</td>				
			</tr>
			<tr class="data_table_row">				
				<td>
					<a name="_IDataFlow_GetFunctionName"></a>				
					<b>GetFunctionName</b>
				</td>
				<td>
					Returns element's activation function name.
				</td>				
			</tr>						
			<tr class="data_table_row">				
				<td>
					<a name="_IDataFlow_RequireData"></a>				
					<b>RequireData</b>
				</td>
				<td>
					Returns <b>true</b> if element requires input data to be processed.
					Only <i>Constant Input</i> does not require any data for normal functioning.
				</td>				
			</tr>	
		</table>
	</div>
	<div class="body_text">		
		<table class="data_table" align="center">
			<tr class="data_table_header">
				<td colspan="2">	
					Data flow operations
				</td>
			</tr>					
			<tr class="data_table_row">
				<td width="35%">
					<a name="_IDataFlow_SetWaitDataState"></a>				
					<b>SetWaitDataState</b>
				</td>
				<td width="65%">
					Sets element's input and output connections to 'data absence' state.
				</td>
			</tr>	
		</table>
	</div>
	<div class="body_text">		
		<table class="data_table" align="center">
			<tr class="data_table_header">
				<td colspan="2">	
					Processing network operations
				</td>
			</tr>
			<tr class="data_table_row">				
				<td width="35%">
					<a name="_IDataFlow_IsReadyForProcessing"></a>				
					<b>IsReadyForProcessing</b>
				</td>
				<td width="65%">
					Verifies whether all element's input connections already received data.
				</td>				
			</tr>						
			<tr class="data_table_row">				
				<td>
					<a name="_IDataFlow_FlowData"></a>				
					<b>FlowData</b>
				</td>
				<td>
					Performs flow of network element's data to it's outputs.
				</td>				
			</tr>
			<tr class="data_table_row">				
				<td>
					<a name="_IDataFlow_ProcessElement"></a>				
					<b>ProcessElement</b>
				</td>
				<td>
					Performs element processing.
					Element data is prepared during this call.
					After this call element ready to flow data to it's output connections.
					It can be done using <a href="#_IDataFlow_FlowData">FlowData</a> call.
				</td>				
			</tr>
		</table>			
	</div>
	<div class="body_text">		
		<table class="data_table" align="center">
			<tr class="data_table_header">
				<td colspan="2">	
					Training network operations
				</td>
			</tr>			
			<tr class="data_table_row">				
				<td width="35%">
					<a name="_IDataFlow_IsReadyForTraining"></a>				
					<b>IsReadyForTraining</b>
				</td>
				<td width="65%">
					Verifies whether all element's output connections already received data.
				</td>				
			</tr>			
			<tr class="data_table_row">				
				<td>
					<a name="_IDataFlow_BackFlow"></a>				
					<b>BackFlow</b>
				</td>
				<td>
					Performs flow of network element's data to it's inputs.
				</td>				
			</tr>
		</table>			
	</div>
	<div class="body_text">		
		<table class="data_table" align="center">
			<tr class="data_table_header">
				<td colspan="2">	
					Element data operations
				</td>
			</tr>						
			<tr class="data_table_row">				
				<td width="35%">
					<a name="_IDataFlow_GetElementData"></a>				
					<b>GetElementData</b>
				</td>
				<td width="65%">
					Fills specified <b>Data Factory</b> object with network element's data.
				</td>				
			</tr>			
			<tr class="data_table_row">				
				<td>
					<a name="_IDataFlow_SetElementData"></a>				
					<b>SetElementData</b>
				</td>
				<td>
					Fills element's internal <b>Data Factory</b> object with data from specified object.
				</td>				
			</tr>			
			<tr class="data_table_row">				
				<td>
					<a name="_IDataFlow_GetDataFactory"></a>				
					<b>GetDataFactory</b>
				</td>
				<td>
					Returns element's <b>Data Factory</b> object.
				</td>				
			</tr>
			<tr class="data_table_row">				
				<td>
					<a name="_IDataFlow_SplitConnectionsData"></a>				
					<b>SplitConnectionsData</b>
				</td>
				<td>
					Returns <b>Data Factory</b> object filled with united data of the specified connections factory.
				</td>				
			</tr>						
		</table>	
	</div>
		
	<div class="body_subtitle">
		Source	
	</div>
	<div class="source_code_title">
		<span class="left">
			Source code that declares <b>IDataFlow</b> interface:
		</span>
		<span class="right">
			<a href="#top" onclick="return toggle_collapse('IDataFlow_declaration')">
				<img id="collapseimg_IDataFlow_declaration" src="../Images/collapse_button.gif" class="collapse_button" align="absmiddle"/>
			</a>
		</span>
	</div>
	<pre class="body_source_code" id="collapseobj_IDataFlow_declaration">
// IDataFlow declaration
interface IDataFlow : public IObject
{
    // Common operations
    virtual sFunction*	GetElementFunction() = 0;
    virtual void		SetElementFunction(sFunction* pFunction) = 0;
    virtual CString	GetFunctionName() = 0;

    virtual bool		RequireData() = 0;

    // Data flow operations
    virtual void		SetWaitDataState() = 0;

    // Processing network operations
    virtual bool		IsReadyForProcessing() = 0;
    virtual void		FlowData() = 0;
    virtual void		ProcessElement() = 0;

    // Training network operations
    virtual bool		IsReadyForTraining() = 0;
    virtual void		BackFlow() = 0;

    // Element data operations
    virtual void		GetElementData(IDataFactory* pData) = 0;
    virtual void		SetElementData(IDataFactory* pData) = 0;
    virtual IDataFactory*	GetDataFactory() = 0;			

    virtual void		SplitConnectionsData(IDataFactory* pData, int FactoryType) = 0;
};</pre>		
	<div class="body_subtitle">	
		Requirements				
	</div>
	<div class="body_text">	
		<b>Header:</b> Declared in: <span class="file_name">CmnElement.h</span>, include <span class="file_name">NetworkImporting.h</span>										
	</div>	
	<div class="body_subtitle">
		See Also
	</div>	
	<div class="body_text">
		<a href="reference_Main.htm">Reference</a> 		
	</div>
	<div class="split_line"></div>	
	<div class="body_text">
		<a href="http://www.scientific-soft.com/" target="_blank">Scientific Software - Neuro Research Group</a>	
	</div>		
	<div class="page_footer">		
		Copyright (c) Scientific Software 2005
	</div>	
</body>
</html>	